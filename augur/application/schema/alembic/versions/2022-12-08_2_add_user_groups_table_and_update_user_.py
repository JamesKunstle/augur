"""Add user_groups table and update user_repo

Revision ID: 2
Revises: 1
Create Date: 2022-12-08 09:37:17.864281

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from augur.application.db.session import DatabaseSession
from augur.application.db.models.augur_operations import UserGroup, UserRepo
import uuid
import logging

# revision identifiers, used by Alembic.
revision = '2'
down_revision = '1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_groups',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', postgresql.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['augur_operations.users.user_id'], name='user_group_user_id_fkey'),
    sa.PrimaryKeyConstraint('group_id'),
    schema='augur_operations'
    )



    logger = logging.getLogger(__name__)

    user_group_id_mapping = {}
    with DatabaseSession(logger) as session:
        user_id_query = sa.sql.text("""SELECT * FROM user_repos;""")
        user_groups = session.fetchall_data_from_sql_text(user_id_query)
        for row in user_groups:
            row.update({"group_id": uuid.uuid4(), "name": "default"})
            user_group_id_mapping.update({row["user_id"]: row["group_id"]})
            del row["repo_id"]

        user_repo_query = sa.sql.text("""SELECT * FROM user_repos;""")
        user_repo_data = session.fetchall_data_from_sql_text(user_repo_query)
        for row in user_repo_data:
            row.update({"group_id": user_group_id_mapping[row["user_id"]]})
            del row["user_id"]
        

        remove_data_from_user_repos_query = sa.sql.text("""DELETE FROM user_repos;""")
        session.execute_sql(remove_data_from_user_repos_query)

        op.add_column('user_repos', sa.Column('group_id', postgresql.UUID(), nullable=False), schema='augur_operations')
        op.drop_constraint('user_repos_user_id_fkey', 'user_repos', schema='augur_operations', type_='foreignkey')
        op.drop_constraint('user_repos_repo_id_fkey', 'user_repos', schema='augur_operations', type_='foreignkey')
        op.create_foreign_key('user_repo_group_id_fkey', 'user_repos', 'user_groups', ['group_id'], ['group_id'], source_schema='augur_operations', referent_schema='augur_operations')
        op.create_foreign_key('user_repo_user_id_fkey', 'user_repos', 'repo', ['repo_id'], ['repo_id'], source_schema='augur_operations', referent_schema='augur_data')
        op.drop_column('user_repos', 'user_id', schema='augur_operations')

        session.insert_data(user_groups, UserGroup, ["user_id", "group_id"])
        session.insert_data(user_groups, UserRepo, ["group_id", "repo_id"])





    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.add_column('user_repos', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False), schema='augur_operations')
    # op.drop_constraint('user_repo_user_id_fkey', 'user_repos', schema='augur_operations', type_='foreignkey')
    # op.drop_constraint('user_repo_group_id_fkey', 'user_repos', schema='augur_operations', type_='foreignkey')
    # op.create_foreign_key('user_repos_repo_id_fkey', 'user_repos', 'repo', ['repo_id'], ['repo_id'], source_schema='augur_operations')
    # op.create_foreign_key('user_repos_user_id_fkey', 'user_repos', 'users', ['user_id'], ['user_id'], source_schema='augur_operations', referent_schema='augur_operations')
    # op.drop_column('user_repos', 'group_id', schema='augur_operations')

    pass
    # op.drop_table('user_groups', schema='augur_operations')
    # ### end Alembic commands ###
